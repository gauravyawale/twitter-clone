@charset "UTF-8";
/*Flexbox gives us the flexiness we need. The top just stays put as there is no scrolling on the body due to the page never exceeding viewport height*/
/*This is our main wrapping element, it's made 100vh high to ensure it is always the correct size and then moved into place and padded with negative margin and padding*/
.Container {
  display: flex;
  overflow: hidden;
  height: 100vh;
  position: relative;
  width: 100%;
  -webkit-backface-visibility: hidden;
          backface-visibility: hidden;
  will-change: overflow;
}

/*All the scrollable sections should overflow and be whatever height they need to be. As they are flex-items (due to being inside a flex container) they could be made to stretch full height at all times if needed.
WebKit inertia scrolling is being added here for any present/future devices that are able to make use of it.
*/
.Left,
.Middle,
.Right {
  overflow: auto;
  height: auto;
  padding: 0.5rem;
  -webkit-overflow-scrolling: touch;
  -ms-overflow-style: none;
}

/*Entirely optional â€“ just wanted to remove the scrollbar on WebKit browsers as I find them ugly*/
.Left::-webkit-scrollbar,
.Middle::-webkit-scrollbar,
.Right::-webkit-scrollbar {
  display: none;
}

/*  Left and Right are set sizes while the Middle is set to flex one so it occupies all remaining space. This could be set as a width too if prefereable, perhaps using calc.*/
.Middle {
  width: 55%;
  flex: 1;
}

.Container {
  display: flex;
  overflow: hidden;
  position: relative;
  width: 100%;
}

.Left {
  width: 20%;
  border-right: 1px solid gray;
}

.Right {
  width: 25%;
  border-left: 1px solid gray;
}

@media screen and (max-width: 768px) {
  .Right, .Left {
    display: none;
  }
}/*# sourceMappingURL=scroll.css.map */